package stats

import (
	"fmt"
	"math/rand"
	"strings"
	"time"
)

type TDigestCache struct {
	centroids   []*centroid
	compression float64
	count       float64

	nCentroids int

	cache []float64
	maxCached int

	// rand is a thread-unsafe source of randomness.
	// It isn't ever safe to add multiple new entries to a TDigest
	// simultaneously, so this significantly speeds up when we need to generate
	// random numbers.
	rand *rand.Rand
	// randBits is a cached store of random bits generated by rand.
	randBits int64
	// nRandBits is the number of random bits remaining before we need to
	// generate new random bits.
	nRandBits int
}

func (d *TDigestCache) String() string {
	sb := strings.Builder{}
	for _, c := range d.centroids {
		sb.WriteString(fmt.Sprintln(c.String()))
	}
	return sb.String()
}

func NewTDigestCache(compression float64, maxCached int) *TDigestCache {
	return &TDigestCache{
		compression: compression,
		maxCached: maxCached,
		rand: rand.New(rand.NewSource(time.Now().UnixNano())),
	}
}

func (d *TDigestCache) nearest(val float64, left int) int {
	return 0
}
